
How does async/await help with performance and scalability?

For applications with many tasks, programmers can consider using async programming. It allows one or more tasks to progress independently, rather than sequentially. The user benefits from increased responsiveness and improved overall performance.

Is it possible to use async/await with promise chains? If yes,
how can this be achieved?

async doSomething(stuff) {
// ...

  return functionThatReturnsPromise()
    .then((a) => /* ... */)
    .then((b) => /* ... */)
    .then(async (c) => {
      const user = await someService.createUser(stuff, c);
      return user;
    });
};

Give 3 real world examples where async/await has been used?

1) query database
2) connect with blockchain
3) api calls

Is it possible to use async/await with promise chains? If yes,
how can this be achieved?
//

Is it possible to nest async functions in JavaScript? Explain with
examples.

We query our database for the user Sumana. We read the profile_img_url and fetch the image from someServer.com.
After fetching the image, we transform it into a different format, say PNG to JPEG.
If the transformation is successful, we send the user an email.
We log this task in our file transformations.log with the timestamp.

async function finishMyTask() { try {
const user = await queryDatabase({ username: 'Sumana' });
const image_url = user.profile_img_url;
const image = await getImageByURL(someServer.com/q=${image_url}`);
const transformedImage = await transformImage(image);
await sendEmail(user.email);
await logTaskInFile('... ');
} catch(err) {
// handle all errors here
}
In which scenarios would you use synchronous code instead of
asynchronous code?

If there is no need of wep api or promises we use synchronous code.